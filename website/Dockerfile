# syntax = docker/dockerfile:1

ARG NODE_VERSION=20
FROM node:${NODE_VERSION}-slim AS base-node
WORKDIR /app
ENV NODE_ENV="production"

FROM base-node AS build-main

RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y \
    build-essential \
    node-gyp \
    pkg-config \
    python-is-python3 && \
    rm -rf /var/lib/apt/lists/*

COPY website/package.json website/package-lock.json* ./

RUN npm ci --include=dev

COPY website/. ./

RUN npm run build

RUN npm prune --omit=dev

FROM base-node AS build-websocket
WORKDIR /app/websocket

COPY website/websocket/package.json ./
RUN npm install
RUN npm install typescript ts-node @types/node

COPY website/websocket/src ./src/
COPY website/src/lib ../src/lib/

FROM base-node AS production-main

COPY --from=build-main --chown=node:node /app/build ./build
COPY --from=build-main --chown=node:node /app/node_modules ./node_modules
COPY --from=build-main --chown=node:node /app/package.json .

USER node
EXPOSE 3000
CMD ["node", "build/index.js"]

FROM base-node AS production-websocket
WORKDIR /app/websocket

COPY --from=build-websocket /app/websocket/node_modules ./node_modules
COPY --from=build-websocket /app/websocket/src ./src
COPY --from=build-websocket /app/src/lib ../src/lib/

USER node
EXPOSE 8080
CMD ["./node_modules/.bin/ts-node", "--esm", "--project", "tsconfig.json", "src/main.ts"]